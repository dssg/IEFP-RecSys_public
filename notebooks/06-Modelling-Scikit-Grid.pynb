{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Notebook Magic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "%load_ext autoreload"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import yaml\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "\n",
    "from sklearn.model_selection import cross_validate\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import average_precision_score\n",
    "from sklearn.metrics import precision_recall_curve\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import auc, roc_curve\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression, Lasso\n",
    "\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "from scipy.stats import randint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_parquet(\"s3://iefp-unemployment/intermediate/transform/intermediate.parquet\")\n",
    "df.shape\n",
    "\n",
    "df = df[df.d_age.notna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['user_id',\n",
       " 'journey_count',\n",
       " 'register_date',\n",
       " 'register_reason',\n",
       " 'exit_date_21',\n",
       " 'exit_date_31',\n",
       " 'exit_reason',\n",
       " 'd_birth_date',\n",
       " 'd_gender',\n",
       " 'd_age',\n",
       " 'd_disabled',\n",
       " 'd_dependents',\n",
       " 'd_professional_training',\n",
       " 'd_profession_card',\n",
       " 'd_school_qualification',\n",
       " 'd_college_qualification',\n",
       " 'd_civil_status',\n",
       " 'd_registration_type',\n",
       " 'd_nationality',\n",
       " 'd_parish',\n",
       " 'd_center',\n",
       " 'd_subsidy',\n",
       " 'd_rsi',\n",
       " 'd_previous_cpp',\n",
       " 'd_previous_job_experience',\n",
       " 'd_desired_cpp',\n",
       " 'd_desired_location',\n",
       " 'd_desired_work_time',\n",
       " 'd_desired_contract',\n",
       " 'success',\n",
       " 'ttj_sub_9',\n",
       " 'intervention_date_207',\n",
       " 'intervention_date_208',\n",
       " 'intervention_date_218',\n",
       " 'intervention_date_219',\n",
       " 'intervention_date_225',\n",
       " 'intervention_date_226',\n",
       " 'intervention_date_235',\n",
       " 'intervention_date_319',\n",
       " 'intervention_date_321',\n",
       " 'intervention_date_323',\n",
       " 'intervention_date_327',\n",
       " 'intervention_date_328',\n",
       " 'intervention_date_329',\n",
       " 'intervention_date_394',\n",
       " 'intervention_date_404',\n",
       " 'intervention_date_416',\n",
       " 'intervention_date_427',\n",
       " 'intervention_date_428',\n",
       " 'intervention_date_429',\n",
       " 'intervention_date_430',\n",
       " 'intervention_date_506',\n",
       " 'intervention_date_507',\n",
       " 'intervention_date_603',\n",
       " 'intervention_date_610',\n",
       " 'intervention_date_611',\n",
       " 'intervention_date_612',\n",
       " 'intervention_date_613',\n",
       " 'intervention_date_615',\n",
       " 'intervention_date_700',\n",
       " 'intervention_date_7005',\n",
       " 'intervention_date_7017',\n",
       " 'intervention_date_7019',\n",
       " 'intervention_date_728',\n",
       " 'intervention_date_729',\n",
       " 'intervention_date_733',\n",
       " 'intervention_date_735',\n",
       " 'intervention_date_739',\n",
       " 'intervention_date_742',\n",
       " 'intervention_date_745',\n",
       " 'intervention_date_747',\n",
       " 'intervention_date_749',\n",
       " 'intervention_date_767',\n",
       " 'intervention_date_768',\n",
       " 'intervention_date_769',\n",
       " 'intervention_date_770',\n",
       " 'intervention_date_771',\n",
       " 'intervention_date_772',\n",
       " 'intervention_date_777',\n",
       " 'intervention_date_778',\n",
       " 'intervention_date_784',\n",
       " 'intervention_date_785',\n",
       " 'intervention_date_791',\n",
       " 'intervention_date_794',\n",
       " 'intervention_date_795',\n",
       " 'intervention_date_796',\n",
       " 'intervention_date_797',\n",
       " 'intervention_date_9902',\n",
       " 'intervention_date_9903',\n",
       " 'intervention_date_9904',\n",
       " 'intervention_date_9906',\n",
       " 'intervention_date_9907']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Intervention feature preparation\n",
    "\n",
    "interv_cols = [col for col in df.columns if \"intervention\" in col]\n",
    "X = df[interv_cols].copy()\n",
    "\n",
    "# Strip col names\n",
    "X.columns = [col.replace(\"intervention_date_\", \"\") for col in X.columns]\n",
    "\n",
    "# Make df boolean\n",
    "X = (X.notna()).astype('int')\n",
    "\n",
    "# Filter for frequent interventions\n",
    "frequent_i = X.mean()[X.mean() > 0.01].index.tolist()\n",
    "X = X[frequent_i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Demographics prep\n",
    "\n",
    "dems = [\"d_age\", \"d_gender\", \"d_civil_status\", \"d_rsi\", \"d_desired_work_time\", \"d_desired_contract\",\n",
    "       \"d_school_qualification\", \"d_college_qualification\", \"d_disabled\", \"d_subsidy\", \"d_previous_cpp\",\n",
    "       \"d_desired_cpp\", \"d_previous_job_experience\"]\n",
    "\n",
    "#Filling NAs!!\n",
    "\n",
    "X[dems] = df[dems].fillna(0)\n",
    "X[\"register_month\"] = df.register_date.dt.month\n",
    "X[\"register_year\"] = df.register_date.dt.year\n",
    "X = pd.get_dummies(X, drop_first=True, dummy_na=True)\n",
    "X.head()\n",
    "\n",
    "# Set output variable\n",
    "\n",
    "Y = df[\"ttj_sub_9\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Test/Train split\n",
    "\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.4, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare pipeline\n",
    "\n",
    "pipeline = Pipeline([\n",
    "    ('rf', RandomForestClassifier(random_state=0)),\n",
    "])\n",
    "\n",
    "#pipeline.fit(X_train,y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grid search\n",
    "\n",
    "param_grid = [\n",
    "        {'rf__n_estimators': [250, 500],\n",
    "         'rf__max_depth': [None, 2, 3]\n",
    "        },\n",
    "    ]\n",
    "\n",
    "'''\n",
    "'rf__max_features': [2, 3],\n",
    "'rf__min_samples_leaf': [5, 10],\n",
    "'rf__max_depth': [None, 2, 3]\n",
    "'''\n",
    "\n",
    "# create the GridSearchCV object\n",
    "grid_search = GridSearchCV(pipeline, param_grid, cv=3, refit=True)\n",
    "\n",
    "# fine-tune the hyperparameters\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# get the best model\n",
    "final_model = grid_search.best_estimator_\n",
    "\n",
    "# predict using the test dataset\n",
    "print(confusion_matrix(y_test, final_model.predict(X_test)))\n",
    "\n",
    "print(accuracy_score(y_test, final_model.predict(X_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4378041658555577 Precision at 0.8 Recall\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Precision / Recall graph\n",
    "\n",
    "\n",
    "def plot_precision_recall(y_test, y_pred, y_prob):\n",
    "    average_precision = average_precision_score(y_test, y_pred)\n",
    "    precision, recall, _ = precision_recall_curve(y_test, y_prob)\n",
    "    print(\"{} Precision at {} Recall\".format(precision[recall>0.8].max(), 0.8))\n",
    "\n",
    "    step_kwargs = ({'step': 'post'})\n",
    "    plt.step(recall, precision, color='b', alpha=0.2, where='post')\n",
    "    plt.fill_between(recall, precision, alpha=0.2, color='b', **step_kwargs)\n",
    "\n",
    "    plt.xlabel('Recall')\n",
    "    plt.ylabel('Precision')\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.title('2-class Precision-Recall curve: AP={0:0.2f}'.format(average_precision))\n",
    "\n",
    "y_pred = pipeline.predict(X_test)\n",
    "y_prob = pipeline.predict_proba(X_test)[:,1]\n",
    "plot_precision_recall(y_test, y_pred, y_prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Roc curve\n",
    "\n",
    "fpr, tpr, threshold = roc_curve(y_test, y_prob)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "plt.title('Receiver Operating Characteristic')\n",
    "plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\n",
    "plt.legend(loc = 'lower right')\n",
    "plt.plot([0, 1], [0, 1],'r--')\n",
    "plt.xlim([0, 1])\n",
    "plt.ylim([0, 1])\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature importance\n",
    "\n",
    "pd.Series(rf.feature_importances_, X_train.columns).sort_values(ascending=False).head(20)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "iefp",
   "language": "python",
   "name": "iefp"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
